<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<packaging>war</packaging>
	<version>0.1</version>

	<groupId>com.cm.contentmanager</groupId>
	<artifactId>ContentManager</artifactId>

	<properties>
		<appengine.app.version>1</appengine.app.version>
		<appengine.target.version>1.9.7</appengine.target.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<spring.version>4.0.6.RELEASE</spring.version>
		<spring.security.version>3.2.4.RELEASE</spring.security.version>
	</properties>
	<repositories>
		<!-- anshu: commented out as I am not sure if this is needed -->
		<!-- <repository> <id>gmultipart</id> <url>http://gmultipart.googlecode.com/svn/repo/m2</url> 
			</repository> -->
	</repositories>
	<dependencies>
		<!-- Compile/runtime dependencies -->
		<!-- begin::google appengine -->
		<dependency>
			<groupId>com.google.appengine</groupId>
			<artifactId>appengine-api-1.0-sdk</artifactId>
			<version>${appengine.target.version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.appengine.orm</groupId>
			<artifactId>datanucleus-appengine</artifactId>
			<version>2.1.2</version>
		</dependency>
		<!-- datanucleus-api-jdo must be included as dependency datanucleus-appengine 
			does not include it automatically under web-inf/lib -->
		<dependency>
			<groupId>org.datanucleus</groupId>
			<artifactId>datanucleus-api-jdo</artifactId>
			<version>3.1.3</version>
		</dependency>
		<!-- <dependency> <groupId>javax.jdo</groupId> <artifactId>jdo-api</artifactId> 
			<version>3.0.1</version> </dependency> <dependency> <groupId>org.datanucleus</groupId> 
			<artifactId>datanucleus-core</artifactId> <version>3.1.3</version> <scope>runtime</scope> 
			</dependency> <dependency> <groupId>org.datanucleus</groupId> <artifactId>datanucleus-api-jdo</artifactId> 
			<version>3.1.3</version> </dependency> <dependency> <groupId>com.google.appengine.orm</groupId> 
			<artifactId>datanucleus-appengine</artifactId> <version>2.1.2</version> </dependency> -->
		<!-- end::google appengine -->
		<dependency>
			<groupId>com.ganyo</groupId>
			<artifactId>gcm-server</artifactId>
			<version>1.0.2</version>
		</dependency>

		<dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>persistence-api</artifactId>
			<version>1.0.2</version>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

		<!-- Test Dependencies -->
		<!-- <dependency> <groupId>com.google.appengine</groupId> <artifactId>appengine-testing</artifactId> 
			<version>${appengine.target.version}</version> <scope>test</scope> </dependency> 
			<dependency> <groupId>com.google.appengine</groupId> <artifactId>appengine-api-stubs</artifactId> 
			<version>${appengine.target.version}</version> <scope>test</scope> </dependency> -->
		<!-- begin::SpringFramework[] -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<!-- end::SpringFramework[] -->
		<!-- begin::Spring Security -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>${spring.security.version}</version>
		</dependency>

		<!-- end::Spring Security -->
		<!-- anshu: commented out as I am not sure if this is needed -->
		<!-- <dependency> <groupId>gmultipart</groupId> <artifactId>gmultipart</artifactId> 
			<version>0.4</version> </dependency> -->
		<!-- begin::jackson mapper -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.13</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>1.9.13</version>
		</dependency>

		<!-- end::jackson mapper -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>17.0</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<version>2.5.1</version>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<!-- Whether a JAR file will be created for the classes in the webapp. 
						Using this optional configuration parameter will make the compiled classes 
						to be archived into a JAR file and the classes directory will then be excluded 
						from the webapp. -->
					<archiveClasses>false</archiveClasses>
					<webResources>
						<!-- in order to interpolate version from pom into appengine-web.xml -->
						<resource>
							<directory>${basedir}/src/main/webapp/WEB-INF</directory>
							<filtering>true</filtering>
							<targetPath>WEB-INF</targetPath>
						</resource>
						<resource>
							<!-- ANSHU: to include jdoconfig.xml under web-inf/classes -->
							<directory>src/main/java</directory>
							<includes>
								<include>META-INF</include>
							</includes>
							<targetPath>src/main/webapp/WEB-INF/classes</targetPath>
						</resource>
					</webResources>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.google.appengine</groupId>
				<artifactId>appengine-maven-plugin</artifactId>
				<version>${appengine.target.version}</version>
				<configuration>
					<!-- http://bigmichi1.github.io/appengine-maven-plugin/update-mojo.html -->
					<!-- Jar the WEB-INF/classes content. -->
					<enableJarClasses>false</enableJarClasses>
				</configuration>
			</plugin>

			<!-- anshu: experimental remove later -->
			<!-- <plugin> <groupId>org.datanucleus</groupId> <artifactId>maven-datanucleus-plugin</artifactId> 
				<version>3.1.2</version> <configuration> <log4jConfiguration>${basedir}/log4j.properties</log4jConfiguration> 
				<verbose>false</verbose> <fork>false</fork> </configuration> <executions> 
				<execution> <phase>process-classes</phase> <goals> <goal>enhance</goal> </goals> 
				</execution> </executions> </plugin> -->
		</plugins>
	</build>

</project>
